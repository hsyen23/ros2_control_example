<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- This file demonstrates the use of some <gazebo> tags -->

    <!-- To include it add the following line -->
    <!-- <xacro:include filename="example_gazebo.xacro" /> -->



    <!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz uses). -->
    <!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->


    <gazebo reference="base_link">
        <material>Gazebo/Orange</material>
    </gazebo>

    <gazebo reference="arm_link">
        <material>Gazebo/Blue</material>
    </gazebo>


    <!-- Gazebo requires the use of plugins to interact with other systems such as ROS. -->


    <!-- This plugin will publish the joint_states for the selected joints 
            (which robot_state_publisher can then use to broadcast the approprate tf). -->
    <!--  Now, we want to use ros2_control. Therefore, the joint_state will be published by ros2_control_node not this gazebo plugin.
    <gazebo>
        <plugin name="gazebo_ros_joint_state_publisher"
            filename="libgazebo_ros_joint_state_publisher.so">
            <update_rate>20</update_rate>
            <joint_name>arm_joint</joint_name>
        </plugin>
    </gazebo>
    -->  

    <!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
            and move the machine accordingly. It's a bit clunky but it works. -->
    <!-- You'll probably want to add damping to the joints to stop them it flopping around. 
            e.g. <dynamics damping="10.0" friction="10.0"/> -->
    <!-- Here's an example message to publish to test it:
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id: world}, joint_names: [arm_joint], points: [  {positions: {0.6}} ]}' -->

    <!-- In other word, we can assign joint pose & orientation through this node to Gazebo, and then Gazeo apply the trajectory to model, and then Gazeo send joint_state to robot_state_publisher, 
        and then robot_state_publisher publish the corresponding tf, and then you can see the result on Rviz2-->         
        
    <!--  DON'T NEED THIS RIGHT NOW.
    <gazebo>
        <plugin name="gazebo_ros_joint_pose_trajectory"
            filename="libgazebo_ros_joint_pose_trajectory.so">
            <update_rate>20</update_rate>
        </plugin>
    </gazebo>
    -->         
        
</robot>
